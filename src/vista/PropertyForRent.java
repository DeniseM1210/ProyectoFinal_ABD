/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import controlador.PropertyForRentDAO;
import java.awt.Color;
import java.awt.Component;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import modelo.PropertyForRentM;

/**
 *
 * @author denis
 */
public class PropertyForRent extends javax.swing.JFrame {

    /**
     * Creates new form PropertyForRent
     */
    byte op = 0;
    public PropertyForRent() {
        initComponents();
        this.getContentPane().setBackground(Color.pink);
        this.setLocationRelativeTo(null);
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cajaProp = new javax.swing.JTextField();
        cajaStr = new javax.swing.JTextField();
        cajaCit = new javax.swing.JTextField();
        cajaPC = new javax.swing.JTextField();
        cajaTyp = new javax.swing.JTextField();
        cajaRoo = new javax.swing.JTextField();
        cajaRent = new javax.swing.JTextField();
        cajaOwner = new javax.swing.JTextField();
        cajaStaff = new javax.swing.JTextField();
        cajaBranch = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        comboOp = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        comboFiltro = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnElim = new javax.swing.JButton();
        btnAct = new javax.swing.JButton();
        btnCons = new javax.swing.JButton();
        btnLimp = new javax.swing.JButton();
        btnReg = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPfr = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel1.setText("Property For Rent");

        jLabel2.setText("Property No:");

        jLabel3.setText("Street:");

        jLabel4.setText("City:");

        jLabel5.setText("Postcode:");

        jLabel6.setText("Type:");

        jLabel7.setText("Rooms:");

        jLabel8.setText("Rent:");

        jLabel9.setText("Owner No:");

        jLabel10.setText("Staff No:");

        jLabel11.setText("Branch No:");

        cajaProp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaPropKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaPropKeyTyped(evt);
            }
        });

        cajaStr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaStrKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaStrKeyTyped(evt);
            }
        });

        cajaCit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaCitKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaCitKeyTyped(evt);
            }
        });

        cajaPC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaPCKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaPCKeyTyped(evt);
            }
        });

        cajaTyp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaTypKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaTypKeyTyped(evt);
            }
        });

        cajaRoo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaRooKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaRooKeyTyped(evt);
            }
        });

        cajaRent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaRentKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaRentKeyTyped(evt);
            }
        });

        cajaOwner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaOwnerKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaOwnerKeyTyped(evt);
            }
        });

        cajaStaff.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaStaffKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaStaffKeyTyped(evt);
            }
        });

        cajaBranch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cajaBranchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaBranchKeyTyped(evt);
            }
        });

        jLabel12.setText("Opciones:");

        comboOp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "Añadir", "Eliminar", "Actualizar", "Consultar" }));
        comboOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOpActionPerformed(evt);
            }
        });

        jLabel13.setText("Filtro:");

        comboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "Property No", "Street", "City", "Postcode", "Type", "Rooms", "Rent", "OwnerNo", "StaffNo", "BranchNo", "Todos" }));

        btnAdd.setText("Añadir");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnElim.setText("Eliminar");
        btnElim.setEnabled(false);
        btnElim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElimActionPerformed(evt);
            }
        });

        btnAct.setText("Actualizar");
        btnAct.setEnabled(false);
        btnAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActActionPerformed(evt);
            }
        });

        btnCons.setText("Consultar");
        btnCons.setEnabled(false);
        btnCons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsActionPerformed(evt);
            }
        });

        btnLimp.setText("Limpiar Campos");
        btnLimp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpActionPerformed(evt);
            }
        });

        btnReg.setText("Regresar");
        btnReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegActionPerformed(evt);
            }
        });

        tablaPfr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaPfr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPfrMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaPfr);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaBranch))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaStaff))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaOwner))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaRent))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaRoo))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaTyp))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaPC))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaCit))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaStr))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cajaProp))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jLabel12)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(comboOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jLabel13)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGap(181, 181, 181)
                                                    .addComponent(btnAdd)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(175, 175, 175)
                                                .addComponent(btnElim)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(165, 165, 165)
                                            .addComponent(btnAct)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(165, 165, 165)
                                        .addComponent(btnCons)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(137, 137, 137)
                                    .addComponent(btnLimp)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(167, 167, 167)
                                .addComponent(btnReg)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel12)
                            .addComponent(comboOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cajaProp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cajaStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnElim))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cajaCit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnAct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cajaPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCons))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cajaTyp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cajaRoo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cajaRent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cajaOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cajaStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cajaBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        PropertyForRentDAO pDAO = new PropertyForRentDAO();
        String rooms = cajaRoo.getText();
        String rent = cajaRent.getText();
        if(cajaProp.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Por favor llene todos los campos");
        }else{
            int ro = Integer.parseInt(rooms);
            int re = Integer.parseInt(rent);
            PropertyForRentM p = new PropertyForRentM(cajaProp.getText(), cajaStr.getText(), cajaCit.getText(), cajaPC.getText(), cajaTyp.getText(), ro, re, cajaOwner.getText(), cajaStaff.getText(), cajaBranch.getText());
            if(pDAO.insertarProperty(p)){
                actualizarTabla();
            }else if(pDAO.insertarProperty(p) == false){
                JOptionPane.showMessageDialog(null, "Error! Campo inexistente");
                actualizarTabla();
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void comboOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOpActionPerformed
        if(comboOp.getSelectedIndex() == 0){
                btnAdd.setEnabled(false);
                btnAct.setEnabled(false);
                btnElim.setEnabled(false);
                btnCons.setEnabled(true);
                btnLimp.setEnabled(false);
                btnReg.setEnabled(true);
            }else if(comboOp.getSelectedIndex() == 1){
                btnAdd.setEnabled(true);
                btnAct.setEnabled(false);
                btnElim.setEnabled(false);
                btnCons.setEnabled(true);
                btnLimp.setEnabled(true);
                btnReg.setEnabled(true);
            }else if(comboOp.getSelectedIndex() == 2){
                btnAdd.setEnabled(false);
                btnAct.setEnabled(false);
                btnElim.setEnabled(true);
                btnCons.setEnabled(true);
                btnLimp.setEnabled(true);
                btnReg.setEnabled(true);
            }else if(comboOp.getSelectedIndex() == 3){
                btnAdd.setEnabled(false);
                btnAct.setEnabled(true);
                btnElim.setEnabled(false);
                btnCons.setEnabled(true);
                btnLimp.setEnabled(true);
                btnReg.setEnabled(true);
            }else if(comboOp.getSelectedIndex() == 4){
                btnAdd.setEnabled(false);
                btnAct.setEnabled(false);
                btnElim.setEnabled(false);
                btnCons.setEnabled(true);
                btnLimp.setEnabled(true);
                btnReg.setEnabled(true);
                comboFiltro.setEnabled(true);
            }
    }//GEN-LAST:event_comboOpActionPerformed

    private void btnRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegActionPerformed
        ventanaPrincipal vp = new ventanaPrincipal();
        this.setVisible(false);
        vp.setVisible(true);
    }//GEN-LAST:event_btnRegActionPerformed

    private void btnElimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElimActionPerformed
        PropertyForRentDAO pDAO = new PropertyForRentDAO();
        
        if(pDAO.eliminarProperty(cajaProp.getText())){
            actualizarTabla();
            reestablecer(cajaBranch, cajaCit, cajaOwner, cajaPC, cajaProp, cajaRent, cajaRoo, cajaStaff, cajaStr, cajaTyp);
        }else{
            actualizarTabla();
            reestablecer(cajaBranch, cajaCit, cajaOwner, cajaPC, cajaProp, cajaRent, cajaRoo, cajaStaff, cajaStr, cajaTyp);
        }
    }//GEN-LAST:event_btnElimActionPerformed

    private void btnActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActActionPerformed
        PropertyForRentDAO pDAO = new PropertyForRentDAO();
        String rooms = cajaRoo.getText();
        String rent = cajaRent.getText();
        int ro = Integer.parseInt(rooms);
        int re = Integer.parseInt(rent);
        PropertyForRentM p = new PropertyForRentM(cajaProp.getText(), cajaStr.getText(), cajaCit.getText(), cajaPC.getText(), cajaTyp.getText(), ro, re, cajaOwner.getText(), cajaStaff.getText(), cajaBranch.getText());
            
        if(pDAO.modificarProperty(p)){
            actualizarTabla();
            reestablecer(cajaBranch, cajaCit, cajaOwner, cajaPC, cajaProp, cajaRent, cajaRoo, cajaStaff, cajaStr, cajaTyp);
        }else{
            actualizarTabla();
            reestablecer(cajaBranch, cajaCit, cajaOwner, cajaPC, cajaProp, cajaRent, cajaRoo, cajaStaff, cajaStr, cajaTyp);
        }
    }//GEN-LAST:event_btnActActionPerformed

    private void btnConsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsActionPerformed
        if(comboOp.getSelectedIndex() == 0){
            actualizarTabla2();
        }else if(comboOp.getSelectedIndex() == 1){
            actualizarTabla2();
        }else if(comboOp.getSelectedIndex() == 2){
            actualizarTabla2();
        }else if(comboOp.getSelectedIndex() == 3){
            actualizarTabla2();
        }else if(comboOp.getSelectedIndex() == 4){
            PropertyForRentDAO pDAO = new PropertyForRentDAO();
            
            if(comboFiltro.getSelectedIndex() == 1){
                if(cajaProp.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 1;
                }
            }else if(comboFiltro.getSelectedIndex() == 2){
                if(cajaStr.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 2;
                }
            }else if(comboFiltro.getSelectedIndex() == 3){
                if(cajaCit.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 3;
                }
            }else if(comboFiltro.getSelectedIndex() == 4){
                if(cajaPC.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 4;
                }
            }else if(comboFiltro.getSelectedIndex() == 5){
                if(cajaTyp.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 5;
                }
            }else if(comboFiltro.getSelectedIndex() == 6){
                if(cajaRoo.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 6;
                }
            }else if(comboFiltro.getSelectedIndex() == 7){
                if(cajaRent.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 7;
                }
            }else if(comboFiltro.getSelectedIndex() == 8){
                if(cajaOwner.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 8;
                }
            }else if(comboFiltro.getSelectedIndex() == 9){
                if(cajaStaff.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 9;
                }
            }else if(comboFiltro.getSelectedIndex() == 10){
                if(cajaBranch.getText().isEmpty()){
                    op = 0;
                }else{
                    op = 10;
                }
            }else if(comboFiltro.getSelectedIndex() == 0){
                op = 0;
            }else if(comboFiltro.getSelectedIndex() == 11){
                op = 11;
            }
            actualizarTabla3();
        }
    }//GEN-LAST:event_btnConsActionPerformed

    private void cajaPropKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaPropKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaPropKeyReleased

    private void cajaStrKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaStrKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaStrKeyReleased

    private void cajaCitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaCitKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaCitKeyReleased

    private void cajaPCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaPCKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaPCKeyReleased

    private void cajaTypKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaTypKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaTypKeyReleased

    private void cajaRooKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaRooKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaRooKeyReleased

    private void cajaRentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaRentKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaRentKeyReleased

    private void cajaOwnerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaOwnerKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaOwnerKeyReleased

    private void cajaStaffKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaStaffKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaStaffKeyReleased

    private void cajaBranchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaBranchKeyReleased
        if(comboOp.getSelectedIndex() == 2 || comboOp.getSelectedIndex() == 3 || comboOp.getSelectedIndex() == 4){
            buscarPorCampos();
        }
    }//GEN-LAST:event_cajaBranchKeyReleased

    private void cajaPropKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaPropKeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < 48) || (caracter > 57)) && (caracter != '\b')
                && ((caracter < 65) || (caracter > 90))){
            evt.consume();
        }
    }//GEN-LAST:event_cajaPropKeyTyped

    private void cajaStrKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaStrKeyTyped
        char carac = evt.getKeyChar();
        if(Character.isLetter(carac) || Character.isSpaceChar(carac) || Character.isDigit(carac)){
        }else{
            evt.consume();
        }
    }//GEN-LAST:event_cajaStrKeyTyped

    private void cajaCitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaCitKeyTyped
        char carac = evt.getKeyChar();
        if(Character.isLetter(carac)){
        }else{
            evt.consume();
        }
    }//GEN-LAST:event_cajaCitKeyTyped

    private void cajaPCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaPCKeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < 48) || (caracter > 57)) && (caracter != '\b')
                && ((caracter < 65) || (caracter > 90)) && (caracter != 32)){
            evt.consume();
        }
    }//GEN-LAST:event_cajaPCKeyTyped

    private void cajaTypKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaTypKeyTyped
        char carac = evt.getKeyChar();
        if(Character.isLetter(carac)){
        }else{
            evt.consume();
        }
    }//GEN-LAST:event_cajaTypKeyTyped

    private void cajaRooKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaRooKeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < 48) || (caracter > 57)) && (caracter != '\b')){
            evt.consume();
        }
    }//GEN-LAST:event_cajaRooKeyTyped

    private void cajaRentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaRentKeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < 48) || (caracter > 57)) && (caracter != '\b')){
            evt.consume();
        }
    }//GEN-LAST:event_cajaRentKeyTyped

    private void cajaOwnerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaOwnerKeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < 48) || (caracter > 57)) && (caracter != '\b')
                && ((caracter < 65) || (caracter > 90))){
            evt.consume();
        }
    }//GEN-LAST:event_cajaOwnerKeyTyped

    private void cajaStaffKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaStaffKeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < 48) || (caracter > 57)) && (caracter != '\b')
                && ((caracter < 65) || (caracter > 90))){
            evt.consume();
        }
    }//GEN-LAST:event_cajaStaffKeyTyped

    private void cajaBranchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaBranchKeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < 48) || (caracter > 57)) && (caracter != '\b')
                && ((caracter < 65) || (caracter > 90))){
            evt.consume();
        }
    }//GEN-LAST:event_cajaBranchKeyTyped

    private void tablaPfrMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPfrMouseClicked
        obtenerRegistro();
    }//GEN-LAST:event_tablaPfrMouseClicked

    private void btnLimpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpActionPerformed
        actualizarTabla();
        reestablecer(cajaBranch, cajaCit, cajaOwner, cajaPC, cajaProp, cajaRent, cajaRoo, cajaStaff, cajaStr, cajaTyp);
    }//GEN-LAST:event_btnLimpActionPerformed
    public void reestablecer(Component...componentes){
        for(Component Component : componentes){
            if(Component instanceof JTextField){
                ((JTextField)Component).setText("");
            }
        }
    }
    
    public void actualizarTabla(){
        String controlador = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
        String url = "jdbc:sqlserver://localhost:1433;databaseName=dreamhome;"
                    + "user=denise1;"
                    + "password=hanji15;"
                    + "encrypt=true;trustServerCertificate=true;";
        String consulta = "SELECT * FROM propertyforrent";
        
        ResultSetTableModel modeloDatos = null;
        try{
            modeloDatos = new ResultSetTableModel(controlador, url, consulta);
        }catch(SQLException ex){
            Logger.getLogger(Sucursal.class.getName()).log(Level.SEVERE, null, ex);
        }catch(ClassNotFoundException ex){
            Logger.getLogger(Sucursal.class.getName()).log(Level.SEVERE, null, ex);
        }
        tablaPfr.setModel(modeloDatos);
    }
    
    public void actualizarTabla2(){
        String controlador = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
        String url = "jdbc:sqlserver://localhost:1433;databaseName=dreamhome;"
                    + "user=denise1;"
                    + "password=hanji15;"
                    + "encrypt=true;trustServerCertificate=true;";
        String consulta = "SELECT * FROM propertyforrent WHERE propertyNo = '" + cajaProp.getText() + "'";
        
        ResultSetTableModel modeloDatos = null;
        try{
            modeloDatos = new ResultSetTableModel(controlador, url, consulta);
        }catch(SQLException ex){
            Logger.getLogger(Sucursal.class.getName()).log(Level.SEVERE, null, ex);
        }catch(ClassNotFoundException ex){
            Logger.getLogger(Sucursal.class.getName()).log(Level.SEVERE, null, ex);
        }
        tablaPfr.setModel(modeloDatos);
    }
    
    public void actualizarTabla3(){
        String controlador = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
        String url = "jdbc:sqlserver://localhost:1433;databaseName=dreamhome;"
                    + "user=denise1;"
                    + "password=hanji15;"
                    + "encrypt=true;trustServerCertificate=true;";
        String consulta = "SELECT * FROM propertyforrent";
        
        ResultSetTableModel modeloDatos = null;
        
        if(op == 1){
            consulta = "select * from propertyforrent where propertyNo = '" + cajaProp.getText() + "';";
        }else if(op == 2){
            consulta = "select * from propertyforrent where street = '" + cajaStr.getText() + "';";
        }else if(op == 3){
            consulta = "select * from propertyforrent where city = '" + cajaCit.getText() + "';";
        }else if(op == 4){
            consulta = "select * from propertyforrent where postcode = '" + cajaPC.getText() + "';";
        }else if(op == 5){
            consulta = "select * from propertyforrent where type = '" + cajaTyp.getText() + "';";
        }else if(op == 6){
            int room = -1;
            if(cajaRoo.getText() != ""){
                room = Integer.parseInt(cajaRoo.getText());
            }
            consulta = "select * from propertyforrent where rooms = " + room + ";";
        }else if(op == 7){
            int rent = -1;
            if(cajaRent.getText() != ""){
                rent = Integer.parseInt(cajaRent.getText());
            }
            consulta = "select * from propertyforrent where rent = " + rent + ";";
        }else if(op == 8){
            consulta = "select * from propertyforrent where ownerNo = '" + cajaOwner.getText() + "';";
        }else if(op == 9){
            consulta = "select * from propertyforrent where staffNo = '" + cajaStaff.getText() + "';";
        }else if(op == 10){
            consulta = "select * from propertyforrent where branchNo = '" + cajaBranch.getText() + "';";
        }
        try{
            modeloDatos = new ResultSetTableModel(controlador, url, consulta);
        }catch(SQLException ex){
            Logger.getLogger(Sucursal.class.getName()).log(Level.SEVERE, null, ex);
        }catch(ClassNotFoundException ex){
            Logger.getLogger(Sucursal.class.getName()).log(Level.SEVERE, null, ex);
        }
        tablaPfr.setModel(modeloDatos);
    }
    
    public void actualizarTabla(String sql){
        String controlador = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
        String url = "jdbc:sqlserver://localhost:1433;databaseName=dreamhome;"
                    + "user=denise1;"
                    + "password=hanji15;"
                    + "encrypt=true;trustServerCertificate=true;";
        String consulta = sql;
        
        ResultSetTableModel modeloDatos = null;
        try{
            modeloDatos = new ResultSetTableModel(controlador, url, consulta);
        }catch(SQLException ex){
            Logger.getLogger(Sucursal.class.getName()).log(Level.SEVERE, null, ex);
        }catch(ClassNotFoundException ex){
            Logger.getLogger(Sucursal.class.getName()).log(Level.SEVERE, null, ex);
        }
        tablaPfr.setModel(modeloDatos);
    }
    
    public void buscarPorCampos(){
        if(!cajaProp.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE propertyNo LIKE '" + cajaProp.getText() + "%'");
        }else if(!cajaStr.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE street LIKE '" + cajaStr.getText() + "%'");
        }else if(!cajaCit.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE city LIKE '" + cajaCit.getText() + "%'");
        }else if(!cajaPC.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE postcode LIKE '" + cajaPC.getText() + "%'");
        }else if(!cajaTyp.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE type LIKE '" + cajaTyp.getText() + "%'");
        }else if(!cajaRoo.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE + CAST(rooms as Varchar(10)) LIKE '" + cajaRoo.getText() + "%'");
        }else if(!cajaRent.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE + CAST(rent as Varchar(20)) LIKE '" + cajaRent.getText() + "%'");
        }else if(!cajaOwner.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE ownerNo LIKE '" + cajaOwner.getText() + "%'");
        }else if(!cajaStaff.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE staffNo LIKE '" + cajaStaff.getText() + "%'");
        }else if(!cajaBranch.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent WHERE branchNo LIKE '" + cajaBranch.getText() + "%'");
        }else if(cajaProp.getText().isEmpty() && cajaStr.getText().isEmpty() && cajaCit.getText().isEmpty() &&
                cajaPC.getText().isEmpty() && cajaTyp.getText().isEmpty() && cajaRoo.getText().isEmpty() && cajaRent.getText().isEmpty() &&
                cajaOwner.getText().isEmpty() && cajaStaff.getText().isEmpty() && cajaBranch.getText().isEmpty()){
            actualizarTabla("SELECT * FROM propertyforrent");
        }
    }
    
    public void obtenerRegistro(){
        cajaProp.setText((String)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 0));
        cajaStr.setText((String)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 1));
        cajaCit.setText((String)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 2));
        cajaPC.setText((String)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 3));
        cajaTyp.setText((String)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 4));
        int i = (short)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 5);
        cajaRoo.setText(i + "");
        int j = (int)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 6);
        cajaRent.setText(j + "");
        cajaOwner.setText((String)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 7));
        cajaStaff.setText((String)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 8));
        cajaBranch.setText((String)tablaPfr.getValueAt(tablaPfr.getSelectedRow(), 9));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PropertyForRent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PropertyForRent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PropertyForRent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PropertyForRent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PropertyForRent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAct;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCons;
    private javax.swing.JButton btnElim;
    private javax.swing.JButton btnLimp;
    private javax.swing.JButton btnReg;
    private javax.swing.JTextField cajaBranch;
    private javax.swing.JTextField cajaCit;
    private javax.swing.JTextField cajaOwner;
    private javax.swing.JTextField cajaPC;
    private javax.swing.JTextField cajaProp;
    private javax.swing.JTextField cajaRent;
    private javax.swing.JTextField cajaRoo;
    private javax.swing.JTextField cajaStaff;
    private javax.swing.JTextField cajaStr;
    private javax.swing.JTextField cajaTyp;
    private javax.swing.JComboBox<String> comboFiltro;
    private javax.swing.JComboBox<String> comboOp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaPfr;
    // End of variables declaration//GEN-END:variables
}
